/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Status;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-19T14:12:38.522563+01:00[Europe/Berlin]")
@Validated
@Tag(name = "Status", description = "Access to Status data")
public interface StatusApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /wecker/stati/ : Add Status with ID
     * Add Status with ID
     *
     * @param status Add Status (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "addStatus",
        summary = "Add Status with ID",
        description = "Add Status with ID",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/wecker/stati/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Status> addStatus(
        @Parameter(name = "Status", description = "Add Status") @Valid @RequestBody(required = false) Status status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Mensch Anwesend\", \"id\" : 123 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /wecker/stati/ : Get all Statis
     * Get all Statis
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllStatis",
        summary = "Get all Statis",
        description = "Get all Statis",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wecker/stati/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> getAllStatis(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"Mensch Anwesend\", \"id\" : 123 }, { \"name\" : \"Mensch Anwesend\", \"id\" : 123 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /wecker/stati/{statusId} : Get Status via ID
     * Get Status via ID
     *
     * @param statusId ID of Status (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Status not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "getStatusViaId",
        summary = "Get Status via ID",
        description = "Get Status via ID",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Status not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/wecker/stati/{statusId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> getStatusViaId(
        @Parameter(name = "statusId", description = "ID of Status", required = true, in = ParameterIn.PATH) @PathVariable("statusId") Long statusId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Mensch Anwesend\", \"id\" : 123 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /wecker/stati/{statusId} : Update Status with ID
     * Update Status with ID
     *
     * @param statusId ID of Status (required)
     * @param status Update an existent Status (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Status not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateStatusViaId",
        summary = "Update Status with ID",
        description = "Update Status with ID",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Status not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/wecker/stati/{statusId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Status> updateStatusViaId(
        @Parameter(name = "statusId", description = "ID of Status", required = true, in = ParameterIn.PATH) @PathVariable("statusId") Long statusId,
        @Parameter(name = "Status", description = "Update an existent Status") @Valid @RequestBody(required = false) Status status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Mensch Anwesend\", \"id\" : 123 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
